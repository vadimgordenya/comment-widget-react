{"version":3,"sources":["addComment.js","comments.js","index.js"],"names":["AddComment","props","react_default","a","createElement","className","type","placeholder","onClick","e","event","inputvalue","target","parentNode","childNodes","value","textareaValue","style","border","addNewComment","borderColor","Comments","arrComments","removeComment","length","map","item","key","id","author","parse","text","dateComment","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","JSON","localStorage","getItem","_this2","newComment","Math","random","toString","substr","Date","setState","concat","toConsumableArray","setItem","stringify","_this3","filter","_this4","console","log","Component","rootElement","document","getElementById","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.b9b75983.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function AddComment(props) {\r\n  const addNewComment = event => {\r\n    const inputvalue = event.target.parentNode.childNodes[0].value;\r\n    const textareaValue = event.target.parentNode.childNodes[1].value;\r\n    \r\n    inputvalue === \"\"\r\n      ? (event.target.parentNode.childNodes[0].style.border = \"1px solid red\")\r\n      : (event.target.parentNode.childNodes[0].style.border =\r\n          \"1px solid green\");\r\n\r\n    textareaValue === \"\"\r\n      ? (event.target.parentNode.childNodes[1].style.border = \"1px solid red\")\r\n      : (event.target.parentNode.childNodes[1].style.border =\r\n          \"1px solid green\");\r\n\r\n    if (inputvalue !== \"\" && textareaValue !== \"\") {\r\n      props.addNewComment(inputvalue, textareaValue);\r\n      event.target.parentNode.childNodes[0].value = \"\";\r\n      event.target.parentNode.childNodes[1].value = \"\";\r\n      event.target.parentNode.childNodes[0].style.borderColor = \"grey\";\r\n      event.target.parentNode.childNodes[1].style.borderColor = \"grey\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-comment-wrapper\">\r\n      <input type=\"text\" placeholder=\"Автор комментария\" />\r\n      <textarea placeholder=\"Текст комментария\" />\r\n      <button className=\"add-comment-btn\" onClick={e => addNewComment(e)}>\r\n        Добавить комментарий\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport parse from 'html-react-parser';\r\n\r\nexport default function Comments(props) {\r\n  let { arrComments, removeComment } = props;\r\n\r\n  return (\r\n    <div>\r\n      {arrComments.length < 1 ? (\r\n        <p>Список комментариев пуст!</p>\r\n      ) : (\r\n        arrComments.map(item => {\r\n          return (\r\n            <div className=\"comment-item\" key={item.id}>\r\n              <div className=\"comment-item__author\">{item.author}</div>\r\n              <div className=\"comment-item__text\">\r\n                {\r\n                  parse(item.text)\r\n                }\r\n              </div>\r\n              <button\r\n                className=\"remove-item\"\r\n                onClick={() => removeComment(item.id)}\r\n              >\r\n                X\r\n              </button>\r\n              <div className=\"comment-item__data\">{item.dateComment}</div>\r\n            </div>\r\n          );\r\n        })\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport AddComment from \"./addComment\";\nimport Comments from \"./comments\";\nimport \"./styles.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      arrComments: JSON.parse(localStorage.getItem(\"commentsJSON\")) || []\n    };\n  }\n\n  addNewComment(author, text) {\n    const id =\n      \"_\" +\n      Math.random()\n        .toString(36)\n        .substr(2, 9);\n    let dateComment = Date();\n    const newComment = {\n      id,\n      author,\n      text,\n      dateComment\n    };\n    this.setState(\n      {\n        arrComments: [...this.state.arrComments, newComment]\n      },\n      () => {\n        localStorage.setItem(\n          \"commentsJSON\",\n          JSON.stringify(this.state.arrComments)\n        );\n      }\n    );\n  }\n\n  removeComment(id) {\n    this.setState(\n      {\n        arrComments: this.state.arrComments.filter(item => item.id !== id)\n      },\n      () => {\n        localStorage.setItem(\n          \"commentsJSON\",\n          JSON.stringify(this.state.arrComments)\n        );\n      }\n    );\n  }\n\n  render() {\n    const { arrComments } = this.state;\n    console.log(arrComments);\n    return (\n      <div className=\"App\">\n        <AddComment\n          addNewComment={(author, text) => this.addNewComment(author, text)}\n        />\n        <Comments\n          arrComments={arrComments}\n          removeComment={id => this.removeComment(id)}\n        />\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}